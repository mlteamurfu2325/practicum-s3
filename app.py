import streamlit as st
from src.llm import ReviewGenerator
from src.db.db_connection import get_unique_rubrics, get_relevant_reviews
from src.reviews_processing.similarity_metrics import calculate_metrics, calculate_average_scores
import time
import logging
from datetime import datetime
import os
import pandas as pd
import numpy as np
from dotenv import load_dotenv
from src.config import AVAILABLE_MODELS, DEFAULT_MODEL


# Load environment variables
load_dotenv()

# Initialize logs in session state if not exists
if 'app_logs' not in st.session_state:
    st.session_state.app_logs = []

# Initialize rate limiter in session state
if 'rate_limiter' not in st.session_state:
    max_requests = int(os.getenv('MAX_REQUESTS_PER_HOUR', '100'))
    timeout = int(os.getenv('TIMEOUT_SECONDS', '15'))
    st.session_state.rate_limiter = RateLimiter(
        max_requests=max_requests,
        window_seconds=3600
    )

# Initialize ReviewGenerators in session state if not exists
if 'review_generator_1' not in st.session_state:
    st.session_state.review_generator_1 = ReviewGenerator(DEFAULT_MODEL)

if 'review_generator_2' not in st.session_state:
    st.session_state.review_generator_2 = ReviewGenerator(DEFAULT_MODEL)


# Rate limiting implementation
class RateLimiter:
    def __init__(self, max_requests=100, window_seconds=3600):
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.requests = {}

    def is_allowed(self, ip):
        now = time.time()
        if ip not in self.requests:
            self.requests[ip] = []

        # Clean old requests
        self.requests[ip] = [
            req for req in self.requests[ip]
            if req > now - self.window_seconds
        ]

        if len(self.requests[ip]) >= self.max_requests:
            logging.warning(
                f"Rate limit exceeded for IP: {ip}. "
                f"Requests in window: {len(self.requests[ip])}"
            )
            return False

        self.requests[ip].append(now)
        return True


def generate_review_comparison(theme, rating, category, reviews):
    """Helper function to generate reviews with two different models"""
    # Get client IP from Streamlit's internal state
    client_ip = (
        st.get_client_ip() if hasattr(st, 'get_client_ip') else 'unknown'
    )

    # Check rate limit
    if not st.session_state.rate_limiter.is_allowed(client_ip):
        st.error(
            "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    reviews_text = "\n\n".join(
        f"–ü—Ä–∏–º–µ—Ä {i+1}:\n{review}" 
        for i, review in enumerate(reviews)
    )

    # Create two columns for side-by-side comparison
    col1, col2 = st.columns(2)

    with col1:
        st.markdown(
            f'<div class="card"><h2>ü§ñ {AVAILABLE_MODELS[DEFAULT_MODEL]}</h2>',
            unsafe_allow_html=True
        )
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤..."):
            review1, error1 = st.session_state.review_generator_1.generate_review(
                theme=theme,
                rating=rating,
                category=category,
                real_reviews=reviews_text
            )

            if error1:
                st.error(error1)
            else:
                st.text_area(
                    "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤",
                    review1,
                    height=200,
                    label_visibility="collapsed"
                )
                metrics1 = calculate_metrics(review1, reviews) if reviews else []
                show_metrics(metrics1, reviews)

    with col2:
        st.markdown(
            f'<div class="card"><h2>ü§ñ {AVAILABLE_MODELS[st.session_state.selected_model]}</h2>',
            unsafe_allow_html=True
        )
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤..."):
            review2, error2 = st.session_state.review_generator_2.generate_review(
                theme=theme,
                rating=rating,
                category=category,
                real_reviews=reviews_text
            )

            if error2:
                st.error(error2)
            else:
                st.text_area(
                    "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤",
                    review2,
                    height=200,
                    label_visibility="collapsed"
                )
                metrics2 = calculate_metrics(review2, reviews) if reviews else []
                show_metrics(metrics2, reviews)


def show_metrics(metrics, reviews):
    """Helper function to display metrics for a review"""
    expander_text = "üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏"
    with st.expander(expander_text, expanded=False):
        if not reviews:
            st.info("–†–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        else:
            # Create DataFrame for metrics table
            data = []
            for i, (review_text, metric) in enumerate(zip(reviews, metrics), 1):
                data.append({
                    '–ù–æ–º–µ—Ä': f'–û—Ç–∑—ã–≤ {i}',
                    '–¢–µ–∫—Å—Ç': review_text,
                    'BLEU': metric['bleu'],
                    'ROUGE': metric['rouge'],
                    'semantic': metric['semantic'],
                    'combined': metric['combined']
                })
            
            # Calculate averages for all metrics
            avg_bleu = np.mean([m['bleu'] for m in metrics])
            avg_rouge = np.mean([m['rouge'] for m in metrics])
            avg_semantic = np.mean([m['semantic'] for m in metrics])
            avg_combined = np.mean([m['combined'] for m in metrics])
            
            # Add average row
            data.append({
                '–ù–æ–º–µ—Ä': '–°—Ä–µ–¥–Ω–µ–µ',
                '–¢–µ–∫—Å—Ç': '',
                'BLEU': round(avg_bleu, 3),
                'ROUGE': round(avg_rouge, 3),
                'semantic': round(avg_semantic, 3),
                'combined': round(avg_combined, 3)
            })
            
            df = pd.DataFrame(data)
            st.dataframe(
                df,
                column_config={
                    '–ù–æ–º–µ—Ä': st.column_config.TextColumn('‚Ññ'),
                    '–¢–µ–∫—Å—Ç': st.column_config.TextColumn('–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞'),
                    'BLEU': st.column_config.NumberColumn(
                        'BLEU Score',
                        help='–û—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ n-–≥—Ä–∞–º–º'
                    ),
                    'ROUGE': st.column_config.NumberColumn(
                        'ROUGE Score',
                        help='–û—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —Å–ª–æ–≤'
                    ),
                    'semantic': st.column_config.NumberColumn(
                        'Semantic Score',
                        help='–û—Ü–µ–Ω–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏'
                    ),
                    'combined': st.column_config.NumberColumn(
                        'Combined Score',
                        help='–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏'
                    )
                },
                hide_index=True
            )


# Page configuration
st.set_page_config(
    page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã",
    page_icon="ü§ñ",
    layout="wide"
)

# Custom CSS for styling
st.markdown("""
    <style>
    /* Main container styling */
    .main {
        padding: 2rem;
    }

    /* Card styling */
    .card {
        background-color: #1e2227;
        padding: 2rem;
        border-radius: 10px;
        border: 1px solid #2e3238;
        margin-bottom: 2rem;
    }

    /* Input styling */
    .stTextInput > div > div > input {
        background-color: #262730;
        border: 1px solid #3e4247;
        padding: 1rem;
        font-size: 1rem;
        border-radius: 8px;
    }

    .stNumberInput > div > div > input {
        background-color: #262730;
        border: 1px solid #3e4247;
        padding: 1rem;
        font-size: 1rem;
        border-radius: 8px;
    }

    /* Button styling */
    .stButton > button {
        width: 100%;
        padding: 0.75rem 1.5rem;
        font-size: 1.2rem;
        font-weight: 600;
        color: white;
        background: linear-gradient(45deg, #FF4B2B, #FF416C);
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .stButton > button:hover {
        transform: translateY(-2px);
    }

    /* Text area styling */
    .stTextArea > div > div > textarea {
        background-color: #262730;
        border: 1px solid #3e4247;
        padding: 1rem;
        font-size: 1rem;
        border-radius: 8px;
        color: #fafafa;
    }

    /* Headers styling */
    h1 {
        color: #fafafa;
        margin-bottom: 1.5rem;
        font-size: 1.5rem !important;
    }

    h2 {
        color: #fafafa;
        margin-bottom: 1.5rem;
        font-size: 1.2rem !important;
    }

    .big-font {
        color: #fafafa;
        font-size: 1.2rem !important;
        margin-bottom: 0.5rem;
        font-weight: 500;
    }

    /* Error message styling */
    .stAlert {
        background-color: #3e1c1c;
        border: 1px solid #ff4b4b;
        color: #ff4b4b;
        padding: 1rem;
        border-radius: 8px;
    }

    /* Warning message styling */
    .stWarning {
        background-color: #3e351c;
        border: 1px solid #ffd700;
        color: #ffd700;
        padding: 1rem;
        border-radius: 8px;
    }

    /* Loading spinner styling */
    .stSpinner > div {
        border-color: #FF4B2B !important;
    }

    /* Expander styling */
    .streamlit-expanderHeader {
        font-size: 1.3rem !important;
        font-weight: 500;
    }

    /* Logs styling */
    .log-container {
        background-color: #1a1c21;
        border: 1px solid #2e3238;
        border-radius: 8px;
        padding: 1rem;
        font-family: 'Courier New', monospace;
        max-height: 400px;
        overflow-y: auto;
    }

    .log-entry {
        padding: 0.5rem;
        border-bottom: 1px solid #2e3238;
        font-size: 0.9rem;
    }

    .log-entry:last-child {
        border-bottom: none;
    }

    .log-timestamp {
        color: #888;
        margin-right: 1rem;
    }

    .log-level-INFO {
        color: #4CAF50;
    }

    .log-level-WARNING {
        color: #FFC107;
    }

    .log-level-ERROR {
        color: #f44336;
    }

    .log-model {
        color: #00BCD4;
        margin-right: 1rem;
    }
    </style>
""", unsafe_allow_html=True)

# Title with emojis
st.markdown(
    '<div class="card">'
    '<h1 style="text-align: center; margin-bottom: 0.5rem;">'
    'ü§ñ ‚úèÔ∏è üëÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –º–æ—Ç–∏–≤–∞–º –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç'
    '</h1>'
    '</div>',
    unsafe_allow_html=True
)

# Parameters section
st.markdown(
    '<div class="card">'
    '<h2>üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∂–µ–ª–∞–µ–º–æ–≥–æ –æ—Ç–∑—ã–≤–∞:</h2>',
    unsafe_allow_html=True
)

# Input fields with larger labels
col1, col2, col3 = st.columns([2, 1, 1])

with col1:
    st.markdown(
        '<p class="big-font">–ö–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ –æ—Ç–∑—ã–≤–∞:</p>',
        unsafe_allow_html=True
    )
    theme = st.text_input(
        "–ö–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ –æ—Ç–∑—ã–≤–∞",
        key="theme",
        label_visibility="collapsed",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
        value="—Å—É–ø–µ—Ä —Ü–µ–Ω—ã"
    )

    st.markdown('<p class="big-font">–†—É–±—Ä–∏–∫–∞:</p>', unsafe_allow_html=True)
    rubrics = get_unique_rubrics()
    category = st.selectbox(
        "–†—É–±—Ä–∏–∫–∞",
        options=rubrics,
        key="category",
        label_visibility="collapsed"
    )

with col2:
    st.markdown('<p class="big-font">–†–µ–π—Ç–∏–Ω–≥:</p>', unsafe_allow_html=True)
    rating = st.number_input(
        "–†–µ–π—Ç–∏–Ω–≥",
        min_value=1,
        max_value=5,
        value=5,
        key="rating",
        label_visibility="collapsed"
    )
    st.markdown(f"{'‚≠ê' * int(rating)}")

with col3:
    st.markdown('<p class="big-font">–ú–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:</p>', unsafe_allow_html=True)
    # Filter out the default model from available models
    comparison_models = {k: v for k, v in AVAILABLE_MODELS.items() if k != DEFAULT_MODEL}
    if 'selected_model' not in st.session_state:
        st.session_state.selected_model = list(comparison_models.keys())[0]
    
    selected_model = st.selectbox(
        "–ú–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
        options=list(comparison_models.keys()),
        format_func=lambda x: comparison_models[x],
        key="model_select",
        label_visibility="collapsed"
    )
    
    if selected_model != st.session_state.selected_model:
        st.session_state.selected_model = selected_model
        st.session_state.review_generator_2 = ReviewGenerator(selected_model)

# Generate button with padding
st.markdown("<div style='padding: 1.5rem 0;'>", unsafe_allow_html=True)
generate = st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!", use_container_width=True)
st.markdown("</div>", unsafe_allow_html=True)

st.markdown('</div>', unsafe_allow_html=True)

# Review generation section
if generate:
    if not theme or not category:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
    else:
        reviews, exact_match = get_relevant_reviews(category, rating)

        if not reviews:
            st.error(
                f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ä—É–±—Ä–∏–∫–∏ '{category}'"
            )
        else:
            if not exact_match:
                msg = (
                    "–î–ª—è —Ä—É–±—Ä–∏–∫–∏ '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {}. "
                    "–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –∏–∑ —ç—Ç–æ–π —Ä—É–±—Ä–∏–∫–∏."
                ).format(category, rating)
                st.info(msg)

            # Proceed with generation
            generate_review_comparison(theme, rating, category, reviews)

# Logs section at the bottom
st.markdown('<div class="card">', unsafe_allow_html=True)
with st.expander("üìã –õ–æ–≥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤", expanded=False):
    if not st.session_state.app_logs:
        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤")
    else:
        st.markdown('<div class="log-container">', unsafe_allow_html=True)
        for log in reversed(st.session_state.app_logs):
            st.markdown(
                f'<div class="log-entry">{log}</div>',
                unsafe_allow_html=True
            )
        st.markdown('</div>', unsafe_allow_html=True)

st.markdown('</div>', unsafe_allow_html=True)
